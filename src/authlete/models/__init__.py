"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from typing import TYPE_CHECKING
from importlib import import_module

if TYPE_CHECKING:
    from .apiresponse import APIResponse, APIResponseTypedDict
    from .category import Category, CategoryTypedDict
    from .deleteorderop import DeleteOrderRequest, DeleteOrderRequestTypedDict
    from .deletepetop import DeletePetRequest, DeletePetRequestTypedDict
    from .deleteuserop import DeleteUserRequest, DeleteUserRequestTypedDict
    from .findpetsbystatusop import (
        FindPetsByStatusRequest,
        FindPetsByStatusRequestTypedDict,
        FindPetsByStatusStatus,
    )
    from .findpetsbytagsop import FindPetsByTagsRequest, FindPetsByTagsRequestTypedDict
    from .getorderbyidop import GetOrderByIDRequest, GetOrderByIDRequestTypedDict
    from .getpetbyidop import GetPetByIDRequest, GetPetByIDRequestTypedDict
    from .getuserbynameop import GetUserByNameRequest, GetUserByNameRequestTypedDict
    from .loginuserop import (
        LoginUserRequest,
        LoginUserRequestTypedDict,
        LoginUserResponse,
        LoginUserResponseTypedDict,
    )
    from .order import Order, OrderStatus, OrderTypedDict
    from .pet import Pet, PetStatus, PetTypedDict
    from .security import Security, SecurityTypedDict
    from .tag import Tag, TagTypedDict
    from .updateuserop import UpdateUserRequest, UpdateUserRequestTypedDict
    from .uploadfileop import UploadFileRequest, UploadFileRequestTypedDict
    from .user import User, UserTypedDict

__all__ = [
    "APIResponse",
    "APIResponseTypedDict",
    "Category",
    "CategoryTypedDict",
    "DeleteOrderRequest",
    "DeleteOrderRequestTypedDict",
    "DeletePetRequest",
    "DeletePetRequestTypedDict",
    "DeleteUserRequest",
    "DeleteUserRequestTypedDict",
    "FindPetsByStatusRequest",
    "FindPetsByStatusRequestTypedDict",
    "FindPetsByStatusStatus",
    "FindPetsByTagsRequest",
    "FindPetsByTagsRequestTypedDict",
    "GetOrderByIDRequest",
    "GetOrderByIDRequestTypedDict",
    "GetPetByIDRequest",
    "GetPetByIDRequestTypedDict",
    "GetUserByNameRequest",
    "GetUserByNameRequestTypedDict",
    "LoginUserRequest",
    "LoginUserRequestTypedDict",
    "LoginUserResponse",
    "LoginUserResponseTypedDict",
    "Order",
    "OrderStatus",
    "OrderTypedDict",
    "Pet",
    "PetStatus",
    "PetTypedDict",
    "Security",
    "SecurityTypedDict",
    "Tag",
    "TagTypedDict",
    "UpdateUserRequest",
    "UpdateUserRequestTypedDict",
    "UploadFileRequest",
    "UploadFileRequestTypedDict",
    "User",
    "UserTypedDict",
]

_dynamic_imports: dict[str, str] = {
    "APIResponse": ".apiresponse",
    "APIResponseTypedDict": ".apiresponse",
    "Category": ".category",
    "CategoryTypedDict": ".category",
    "DeleteOrderRequest": ".deleteorderop",
    "DeleteOrderRequestTypedDict": ".deleteorderop",
    "DeletePetRequest": ".deletepetop",
    "DeletePetRequestTypedDict": ".deletepetop",
    "DeleteUserRequest": ".deleteuserop",
    "DeleteUserRequestTypedDict": ".deleteuserop",
    "FindPetsByStatusRequest": ".findpetsbystatusop",
    "FindPetsByStatusRequestTypedDict": ".findpetsbystatusop",
    "FindPetsByStatusStatus": ".findpetsbystatusop",
    "FindPetsByTagsRequest": ".findpetsbytagsop",
    "FindPetsByTagsRequestTypedDict": ".findpetsbytagsop",
    "GetOrderByIDRequest": ".getorderbyidop",
    "GetOrderByIDRequestTypedDict": ".getorderbyidop",
    "GetPetByIDRequest": ".getpetbyidop",
    "GetPetByIDRequestTypedDict": ".getpetbyidop",
    "GetUserByNameRequest": ".getuserbynameop",
    "GetUserByNameRequestTypedDict": ".getuserbynameop",
    "LoginUserRequest": ".loginuserop",
    "LoginUserRequestTypedDict": ".loginuserop",
    "LoginUserResponse": ".loginuserop",
    "LoginUserResponseTypedDict": ".loginuserop",
    "Order": ".order",
    "OrderStatus": ".order",
    "OrderTypedDict": ".order",
    "Pet": ".pet",
    "PetStatus": ".pet",
    "PetTypedDict": ".pet",
    "Security": ".security",
    "SecurityTypedDict": ".security",
    "Tag": ".tag",
    "TagTypedDict": ".tag",
    "UpdateUserRequest": ".updateuserop",
    "UpdateUserRequestTypedDict": ".updateuserop",
    "UploadFileRequest": ".uploadfileop",
    "UploadFileRequestTypedDict": ".uploadfileop",
    "User": ".user",
    "UserTypedDict": ".user",
}


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)
